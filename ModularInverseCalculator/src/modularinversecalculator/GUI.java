/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package modularinversecalculator;

import java.awt.event.ActionEvent;
import java.math.BigInteger;
import javax.swing.Action;
import javax.swing.JPopupMenu;
import javax.swing.KeyStroke;
import javax.swing.SwingWorker;
import javax.swing.text.DefaultEditorKit;
import javax.swing.text.JTextComponent;
import javax.swing.text.TextAction;
import java.text.NumberFormat;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.util.Locale;
import java.math.BigDecimal;
import java.math.MathContext;

/**
 *  This Class creates a GUI Form That Allows
 *  For the User to Input a Set of Two Numbers
 *  in order to find the Modular Multiplicative
 *  Inverse. The Application allows for the User
 *  to choose two Separate Methods for Finding
 *  the Modular Multiplicative Inverse. The User
 *  can either choose to invoke the "Naive" Method
 *  which will take a longer time in order to
 *  calculate the Result, or they can instead use
 *  the  "Extended Euclidean Algorithm" in order to
 *  find the Solution Faster.
 * 
 *  @date           November 15, 2020
 *  @author         Tyler Fontana
 *  @version        1.0.1
 */
public class GUI extends javax.swing.JFrame {

    /**
     *  Basic Constructor that is Responsible
     *  For Creating a Reference to the Class
     *  In Addition to Invoking the initComponents
     *  Method which Creates and Packs the GUI
     *  Window's Form.
     * 
     */
    public GUI() {
        // Create the GUI Display
        // Window Form.
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jTextField1 = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        jTextField2 = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jPanel8 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jPanel9 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jPanel11 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jPanel12 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jPanel13 = new javax.swing.JPanel();
        jButton2 = new javax.swing.JButton();
        jPanel14 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jPanel15 = new javax.swing.JPanel();
        jCheckBox1 = new javax.swing.JCheckBox();
        jPanel10 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Modular Inverse Calculator");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });
        getContentPane().setLayout(new javax.swing.OverlayLayout(getContentPane()));

        jPanel1.setOpaque(false);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/modularinversecalculator/images/TitleImage436x46.png"))); // NOI18N
        jLabel1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jLabel1FocusGained(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 500, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                    .addContainerGap(33, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 434, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(33, Short.MAX_VALUE)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 500, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                    .addContainerGap(27, Short.MAX_VALUE)
                    .addComponent(jLabel1)
                    .addContainerGap(427, Short.MAX_VALUE)))
        );

        getContentPane().add(jPanel1);

        jPanel2.setOpaque(false);

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/modularinversecalculator/images/ModInverseToolEquation205x29.png"))); // NOI18N

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 500, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                    .addContainerGap(152, Short.MAX_VALUE)
                    .addComponent(jLabel2)
                    .addContainerGap(143, Short.MAX_VALUE)))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 500, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                    .addContainerGap(80, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(376, Short.MAX_VALUE)))
        );

        getContentPane().add(jPanel2);

        jPanel3.setOpaque(false);

        jTextField1.setFont(new java.awt.Font("Times New Roman", 0, 13)); // NOI18N
        jTextField1.setForeground(new java.awt.Color(153, 153, 153));
        jTextField1.setText("Ex. \"270\"");
        jTextField1.setMargin(new java.awt.Insets(0, 5, 0, 5));
        jTextField1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextField1FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextField1FocusLost(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 500, Short.MAX_VALUE)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                    .addContainerGap(55, Short.MAX_VALUE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 403, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(42, Short.MAX_VALUE)))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 500, Short.MAX_VALUE)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                    .addContainerGap(140, Short.MAX_VALUE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(320, Short.MAX_VALUE)))
        );

        getContentPane().add(jPanel3);

        jPanel4.setOpaque(false);

        jTextField2.setFont(new java.awt.Font("Times New Roman", 0, 13)); // NOI18N
        jTextField2.setForeground(new java.awt.Color(153, 153, 153));
        jTextField2.setText("Ex. \"192\"");
        jTextField2.setMargin(new java.awt.Insets(0, 5, 0, 5));
        jTextField2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextField2FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextField2FocusLost(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 500, Short.MAX_VALUE)
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                    .addContainerGap(55, Short.MAX_VALUE)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 403, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(42, Short.MAX_VALUE)))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 500, Short.MAX_VALUE)
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                    .addContainerGap(203, Short.MAX_VALUE)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(257, Short.MAX_VALUE)))
        );

        getContentPane().add(jPanel4);

        jPanel5.setOpaque(false);

        jLabel3.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("A:");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 500, Short.MAX_VALUE)
            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                    .addContainerGap(27, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(447, Short.MAX_VALUE)))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 500, Short.MAX_VALUE)
            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                    .addContainerGap(143, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(323, Short.MAX_VALUE)))
        );

        getContentPane().add(jPanel5);

        jPanel6.setOpaque(false);

        jLabel4.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("B:");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 500, Short.MAX_VALUE)
            .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                    .addContainerGap(26, Short.MAX_VALUE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(446, Short.MAX_VALUE)))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 500, Short.MAX_VALUE)
            .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                    .addContainerGap(207, Short.MAX_VALUE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(262, Short.MAX_VALUE)))
        );

        getContentPane().add(jPanel6);

        jPanel7.setOpaque(false);

        jButton1.setText("Calculate");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 500, Short.MAX_VALUE)
            .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                    .addContainerGap(99, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(286, Short.MAX_VALUE)))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 500, Short.MAX_VALUE)
            .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                    .addContainerGap(267, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(191, Short.MAX_VALUE)))
        );

        getContentPane().add(jPanel7);

        jPanel8.setOpaque(false);

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Times New Roman", 0, 13)); // NOI18N
        jTextArea1.setLineWrap(true);
        jTextArea1.setRows(10);
        jTextArea1.setMargin(new java.awt.Insets(0, 5, 0, 5));
        jScrollPane1.setViewportView(jTextArea1);
        jTextArea1.setEnabled(false);

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 500, Short.MAX_VALUE)
            .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                    .addContainerGap(55, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 403, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(42, Short.MAX_VALUE)))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 500, Short.MAX_VALUE)
            .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                    .addContainerGap(329, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(55, Short.MAX_VALUE)))
        );

        getContentPane().add(jPanel8);

        jPanel9.setOpaque(false);

        jLabel5.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("R:");

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 500, Short.MAX_VALUE)
            .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel9Layout.createSequentialGroup()
                    .addContainerGap(26, Short.MAX_VALUE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(447, Short.MAX_VALUE)))
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 500, Short.MAX_VALUE)
            .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel9Layout.createSequentialGroup()
                    .addContainerGap(330, Short.MAX_VALUE)
                    .addComponent(jLabel5)
                    .addContainerGap(148, Short.MAX_VALUE)))
        );

        getContentPane().add(jPanel9);

        jPanel11.setOpaque(false);

        jLabel7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/modularinversecalculator/images/Loader32x32.gif"))); // NOI18N

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 500, Short.MAX_VALUE)
            .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel11Layout.createSequentialGroup()
                    .addContainerGap(57, Short.MAX_VALUE)
                    .addComponent(jLabel7)
                    .addContainerGap(411, Short.MAX_VALUE)))
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 500, Short.MAX_VALUE)
            .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel11Layout.createSequentialGroup()
                    .addContainerGap(269, Short.MAX_VALUE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(191, Short.MAX_VALUE)))
        );

        jLabel7.setVisible(false);

        getContentPane().add(jPanel11);

        jPanel12.setOpaque(false);

        jLabel8.setForeground(new java.awt.Color(255, 0, 51));
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setText("Invalid Number");

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 500, Short.MAX_VALUE)
            .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel12Layout.createSequentialGroup()
                    .addContainerGap(55, Short.MAX_VALUE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 402, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(43, Short.MAX_VALUE)))
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 500, Short.MAX_VALUE)
            .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel12Layout.createSequentialGroup()
                    .addContainerGap(447, Short.MAX_VALUE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(18, Short.MAX_VALUE)))
        );

        jLabel8.setVisible(false);

        getContentPane().add(jPanel12);

        jPanel13.setOpaque(false);

        jButton2.setText("Clear");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel13Layout = new javax.swing.GroupLayout(jPanel13);
        jPanel13.setLayout(jPanel13Layout);
        jPanel13Layout.setHorizontalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 500, Short.MAX_VALUE)
            .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel13Layout.createSequentialGroup()
                    .addContainerGap(222, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(163, Short.MAX_VALUE)))
        );
        jPanel13Layout.setVerticalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 500, Short.MAX_VALUE)
            .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel13Layout.createSequentialGroup()
                    .addContainerGap(267, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(191, Short.MAX_VALUE)))
        );

        getContentPane().add(jPanel13);

        jPanel14.setOpaque(false);

        jLabel9.setFont(new java.awt.Font("Lucida Grande", 1, 10)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(51, 255, 0));
        jLabel9.setText("<html><left>Use Extended<br></br>Euclidean<br></br>Algorithm?</left></html>");

        javax.swing.GroupLayout jPanel14Layout = new javax.swing.GroupLayout(jPanel14);
        jPanel14.setLayout(jPanel14Layout);
        jPanel14Layout.setHorizontalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 500, Short.MAX_VALUE)
            .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel14Layout.createSequentialGroup()
                    .addContainerGap(351, Short.MAX_VALUE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(70, Short.MAX_VALUE)))
        );
        jPanel14Layout.setVerticalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 500, Short.MAX_VALUE)
            .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel14Layout.createSequentialGroup()
                    .addContainerGap(268, Short.MAX_VALUE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(193, Short.MAX_VALUE)))
        );

        getContentPane().add(jPanel14);

        jPanel15.setOpaque(false);

        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel15Layout = new javax.swing.GroupLayout(jPanel15);
        jPanel15.setLayout(jPanel15Layout);
        jPanel15Layout.setHorizontalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 500, Short.MAX_VALUE)
            .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel15Layout.createSequentialGroup()
                    .addContainerGap(430, Short.MAX_VALUE)
                    .addComponent(jCheckBox1)
                    .addContainerGap(42, Short.MAX_VALUE)))
        );
        jPanel15Layout.setVerticalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 500, Short.MAX_VALUE)
            .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel15Layout.createSequentialGroup()
                    .addContainerGap(265, Short.MAX_VALUE)
                    .addComponent(jCheckBox1)
                    .addContainerGap(212, Short.MAX_VALUE)))
        );

        getContentPane().add(jPanel15);

        jPanel10.setOpaque(false);

        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/modularinversecalculator/images/Background500x500.png"))); // NOI18N

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 500, Short.MAX_VALUE)
            .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 500, Short.MAX_VALUE)
            .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel10);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     *  This method is triggered when the User
     *  Clicks on the Clear "Calculate" JButton Located
     *  At the Bottom of the GUI Window Form. It creates
     *  and starts a Background Event Queue Thread
     *  which is responsible for 
     * 
     *  @param evt      The Invoking Action of the User
     *                  Clicking on the Clear JButton.
     */
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // Create and Execute a New
        // TaskHandler Thread that is
        // Responsible for Checking
        // the Number Inputs.
        new TaskHandler(1).execute();
        // Show Loading Image While
        // Background Process Checks
        // User Input Information.
        showWaitingImage(true);
        // Disable the Components within
        // the GUI Form Seeing as the User
        // Has Pressed the Calculation
        // Button.
        enableComponents(false);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jLabel1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jLabel1FocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_jLabel1FocusGained

    /**
     *  This Method is Invoked Whenever A User
     *  Clicks into the 'A' Variable Input Text
     *  Field and causes the Component to Gain the
     *  Form's Overall Focus. This method is Responsible
     *  for Removing the Default TextField Value should 
     *  the User click into the Component. Should the User
     *  Click into the Component, the Background Color will be
     *  changed to White should it be Red, while the Font
     *  Color will be changed to Black should it currently
     *  be Gray. ** This is done for Aesthetic Purposes and
     *  User Comprehension.**
     * 
     *  @param evt      The User Action of Clicking Into the
     *                  'A' Variable JTextField.
     */
    private void jTextField1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextField1FocusGained
        // If the Modular Inverse Result TextArea
        // Currently has Data from a previous calculation
        // within it, clear the data and reset the form
        // Upon the User Clicking into the A Variable
        // Text Field.
        if (!jTextArea1.getText().isBlank()) {
            // Clear the Inverse Text Area
            // of any Text.
            jTextArea1.setText("");
        }
        
        // Show the Status Message Label.
        setStatusMessageVisibility(false);
        
        // If the 'A' Variable Field Currently has the Default
        // Text Value contained within it upon the User Clicking
        // into the Field, then Erase the Text and Set the Background
        // Color to White and the Font Color to Black.
        if (jTextField1.getText().equalsIgnoreCase("Ex. \"270\"")) {
            // Clear the Default Text.
            jTextField1.setText("");
            // Set Font Color to Black.
            jTextField1.setForeground(new java.awt.Color(0, 0, 0));
            // Set Background Color to White.
            jTextField1.setBackground(new java.awt.Color(255, 255, 255));
        }
        // If the Default Text isn't Present within the 'A'
        // Variable Response Form, ensure that the Font Color
        // is Black and that the Background Color is White
        // in case this is After a Failed Previous Calculation.
        else {
            // Set the Font Color to Black
            jTextField1.setForeground(new java.awt.Color(0, 0, 0));
            // Set the Background Color to White.
            jTextField1.setBackground(new java.awt.Color(255, 255, 255));
        }
    }//GEN-LAST:event_jTextField1FocusGained

    /**
     *  This Method is Invoked Whenever A User
     *  Clicks out of the 'A' Variable Input Text
     *  Field and causes the Component to Lose the
     *  Form's Overall Focus. This method is Responsible
     *  for Reshowing the Default TextField Value and
     *  showing its Default Text Color should the User 
     *  click out the Component and not have entered 
     *  an Input Value. 
     * 
     *  @param evt      The User Action of Clicking Out of the
     *                  'A' Variable JTextField.
     */
    private void jTextField1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextField1FocusLost
        // If the Response Form Contains a Blank Response after
        // the Component Loses Focus, then Reset the Text Input
        // to the Default String Value.
        if (jTextField1.getText().equalsIgnoreCase("")) {
            // Set Form's Display Text Value as the
            // Default String.
            jTextField1.setText("Ex. \"270\"");
            // Set the Font Color to Gray to Symbolize
            // that this is the Default Text Value.
            jTextField1.setForeground(new java.awt.Color(153, 153, 153));
            // Set Background Color to Black
            jTextField1.setBackground(new java.awt.Color(255, 255, 255));
        }
        // If the User Clicks out of the Form After Entering a
        // Response other than the Blank or Default Value, then
        // ensure that the Background Color is White and the
        // Font Color is Black Within the Response Form.
        else {
            // Check to See if the Default Text Value isn't Present.
            if (!jTextField1.getText().equalsIgnoreCase("Ex. \"270\"")) {
                // Set Font Color to Black.
                jTextField1.setForeground(new java.awt.Color(0, 0, 0));
                // Set Background Color to White.
                jTextField1.setBackground(new java.awt.Color(255, 255, 255));
            }
        }
    }//GEN-LAST:event_jTextField1FocusLost

    /**
     *  This Method is Invoked Whenever A User
     *  Clicks into the 'B' Variable Input Text
     *  Field and causes the Component to Gain the
     *  Form's Overall Focus. This method is Responsible
     *  for Removing the Default TextField Value should 
     *  the User click into the Component. Should the User
     *  Click into the Component, the Background Color will be
     *  changed to White should it be Red, while the Font
     *  Color will be changed to Black should it currently
     *  be Gray. ** This is done for Aesthetic Purposes and
     *  User Comprehension.**
     * 
     *  @param evt      The User Action of Clicking Into the
     *                  'B' Variable JTextField.
     */
    private void jTextField2FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextField2FocusGained
        // If the Modular Inverse Result TextArea
        // Currently has Data from a previous calculation
        // within it, clear the data and reset the form
        // Upon the User Clicking into the B Variable
        // Text Field.
        if (!jTextArea1.getText().isBlank()) {
            // Reset the Inverse Result Text Area
            // to its Default Value.
            jTextArea1.setText("");
        }
        
        // Show the Status Message Label.
        setStatusMessageVisibility(false);
        
        // If the 'B' Variable Field Currently has the Default
        // Text Value contained within it upon the User Clicking
        // into the Field, then Erase the Text and Set the Background
        // Color to White and the Font Color to Black.
        if (jTextField2.getText().equalsIgnoreCase("Ex. \"192\"")) {
            // Set the Response Field to and Empty
            // String.
            jTextField2.setText("");
            // Set Font Color to Black.
            jTextField2.setForeground(new java.awt.Color(0, 0, 0));
            // Set Background Color to White.
            jTextField2.setBackground(new java.awt.Color(255, 255, 255));
        }
        // If the Default Text isn't Present within the 'A'
        // Variable Response Form, ensure that the Font Color
        // is Black and that the Background Color is White
        // in case this is After a Failed Previous Calculation.
        else {
            // Set Font Color to Black
            jTextField2.setForeground(new java.awt.Color(0, 0, 0));
            // Set Background Color to White.
            jTextField2.setBackground(new java.awt.Color(255, 255, 255));
        }
    }//GEN-LAST:event_jTextField2FocusGained

    /**
     *  This Method is Invoked Whenever A User
     *  Clicks out of the 'B' Variable Input Text
     *  Field and causes the Component to Lose the
     *  Form's Overall Focus. This method is Responsible
     *  for Reshowing the Default TextField Value and
     *  showing its Default Text Color should the User 
     *  click out the Component and not have entered 
     *  an Input Value. 
     * 
     *  @param evt      The User Action of Clicking Out of the
     *                  'B' Variable JTextField.
     */
    private void jTextField2FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextField2FocusLost
        // If the Response Form Contains a Blank Response after
        // the Component Loses Focus, then Reset the Text Input
        // to the Default String Value.
        if (jTextField2.getText().equalsIgnoreCase("")) {
            // Set Form's Display Text Value as the
            // Default String.
            jTextField2.setText("Ex. \"192\"");
            // Set Font Color to Gray.
            jTextField2.setForeground(new java.awt.Color(153, 153, 153));
            // Set Background Color to White.
            jTextField2.setBackground(new java.awt.Color(255, 255, 255));
        }
        // If the User Clicks out of the Form After Entering a
        // Response other than the Blank or Default Value, then
        // ensure that the Background Color is White and the
        // Font Color is Black Within the Response Form.
        else {
            // Check to See if A Value other Than the Default
            // Text Value is Contained Within the Response Form.
            if (!jTextField2.getText().equalsIgnoreCase("Ex. \"192\"")) {
                // Set Font Color to Black.
                jTextField2.setForeground(new java.awt.Color(0, 0, 0));
                // Set Background Color to White.
                jTextField2.setBackground(new java.awt.Color(255, 255, 255));
            }
        }
    }//GEN-LAST:event_jTextField2FocusLost

    /**
     *  This method is invoked Upon Creating the GUI
     *  Window Form and is used to create a Background
     *  Event Queue Thread which is responsible for
     *  Setting the Initial Values of Global Variables.
     * 
     *  @param evt          The GUI Form Window Being
     *                      Fully Created But not Yet Shown.
     */
    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // Create and Execute a New
        // TaskHandler Thread that is
        // Responsible for Initializing
        // Variables on App Startup.
        new TaskHandler(0).execute();
        // Disable the Components Until
        // Initial Variable Setup is
        // Completed.
        enableComponents(false);
        // Place Focus on Title Image JLabel Upon
        // Window Being Opened.
        jLabel1.requestFocusInWindow();
    }//GEN-LAST:event_formWindowOpened

    /**
     *  This method is invoked when the User
     *  Clicks the Clear JButton located at 
     *  the Bottom of the GUI JFrame Window. This
     *  Method Creates a Background Event Queue
     *  Thread which is responsible for Clearing
     *  the 'A' and 'B' User Response Field of any
     *  Data Input in addition to Resetting all the
     *  other Components within the Form to their
     *  Default Values.
     * 
     *  @param evt      The Invoking Action of the User
     *                  Clicking on the Clear JButton.
     */
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // Create and Execute a New
        // TaskHandler Thread that is
        // Responsible for Clearing
        // the GUI Components in the Form.
        new TaskHandler(2).execute();
        // Disable the Components Until
        // Initial Variable Setup is
        // Completed.
        enableComponents(false);
        // Show the Loading Image While
        // All of the Components are Disabled
        // and Having thier Input Values Reset.
        showWaitingImage(true);
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     *  This method is invoked when the User
     *  Clicks into the JCheckBox User Response
     *  Component that is used to Determine whether
     *  or not they wish to employ the Extended Eucilidean
     *  Algorithm in order to solve for the Modular
     *  Multiplicative Inverse. Selecting the Checkbox
     *  Means that the User wants to used the EEA while
     *  Unselecting the Checkbox means that the User
     *  wishes to use the Naive Manner.
     *  
     * 
     *  @param evt      The Action of the User either
     *                  Selecting or Deselecting the
     *                  'Use EEA' Checkbox.
     */
    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        // Hide the Status Message in Case it
        // is Visible.
        setStatusMessageVisibility(false);
        // Reset the Inverse Result Text Area
        // in Case there is Any Data From
        // a Previous Operaiton Still Present.
        jTextArea1.setText("");
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    /**
     *  This Method is responsible for either
     *  hiding or showing the Loader GIF Image.
     *  This method is called after the user
     *  clicks the Decryption Button or when
     *  the Background Thread's Execution Process
     *  has Finished.
     * 
     *  @param value    The Boolean Value that
     *                  Determines whether or
     *                  not the Loader GIF Image
     *                  will be shown.
     */
    public void showWaitingImage(boolean value) {
        // Set Loader GIF Image's Visibility.
        jLabel7.setVisible(value);
    }
    
    /**
     *  This method is Used to Format the
     *  Parameter String in the Manner of
     *  Removing any Whitespace, New Line,
     *  or Tab Characters. This is done
     *  seeing as we need the String to
     *  be a single uninterrupted Number
     *  Sequence. 
     * 
     *  @param value        The Parameter String
     *                      That the Method will
     *                      Format.
     * 
     *  @return             The Formatted Parameter
     *                      String.
     */
    public String formatString(String value) {
        // Replace any Tab Characters From
        // Within the String.
        value = value.replaceAll("\t", "");
        // Replace any New Line Characters From
        // Within the String.
        value = value.replaceAll("\n", "");
        // Replace and Whitespace From Within
        // the String.
        value = value.replaceAll(" ", "");
        // Trim the Leading and Trailing
        // Whitespace off of the String.
        value = value.trim();
        
        // Return the newly Formatted
        // String.
        return value;
    }
    
    /**
     *  This Method is invoked by a Background Event
     *  Queue Thread Whenever the User Clicks on the
     *  Clear Button Located at the Bottom of the Form.
     *  It is Responsible for Resetting the User Response
     *  Components to their Default Starting Values and
     *  Clearing the Result Field of Any Data from a
     *  Previous Operation.
     */
    public void resetComponentValues() {
        // Reset 'A' Variable Text Field to its Default
        // Text Value.
        jTextField1.setText("Ex. \"270\"");
        // Set 'A' Variable TextField Background Color to White.
        jTextField1.setBackground(new java.awt.Color(255, 255, 255));
        // Set 'A' Variable TextField Font Color to Gray.
        jTextField1.setForeground(new java.awt.Color(204, 204, 204));
        
        // Reset 'B' Variable Text Field to its Default
        // Text Value.
        jTextField2.setText("Ex. \"192\"");
        // Set 'B' Variable TextField Background Color to White.
        jTextField2.setBackground(new java.awt.Color(255, 255, 255));
        // Set 'B' Variable TextField Font Color to Gray.
        jTextField2.setForeground(new java.awt.Color(204, 204, 204));
        
        // Reset the CheckBox to Its Default
        // Selection State.
        resetCheckBox();
        
        // Reset the Inverse Result Field
        // to its Default Text Value.
        jTextArea1.setText("");
        
        // Hide the Status/Error Message Label.
        setStatusMessageVisibility(false);
        
        // Reset Status/Error Message Label Font Color to Red.
        jLabel8.setForeground(new java.awt.Color(255, 0, 51));
    }
    
    /**
     *  This Method is Used to Verify that the
     *  Response that the User has Entered into a
     *  Variable Field is a Valid Number. Seeing
     *  as we are Expecting The User to Input Numbers
     *  containing Hundreds of Digits as Characters,
     *  we might be unable to use Primitive Data Types
     *  such as ints and longs in order to hold the
     *  numbers. For this reason, we will instead keep
     *  the Input Number in the Form of a BigInteger
     *  Object which will Occupy as Much Memory Space
     *  as Needed to Hold the Inputted Number. Thus,
     *  in order to Verify that the Number, which the
     *  User Inputted into the Response Field is
     *  composed soley of Digit Characters (0 - 9),
     *  we will convert the Entire User Response String
     *  into an Array of chars data types and individually
     *  check each one to ensure that it is a Valid Digit.
     *  
     *  **(Note: This Method is Only Invoked AFTER the
     *  User Input String has been Formatted Via the
     *  Format String Method.)**
     *  
     *  @param value            The Parameter User Input
     *                          String which will be Converted
     *                          into a char[] array.
     * 
     *  @return                 Whether or Not the User Input
     *                          String is a Valid Number.
     */
    public boolean verifyNumber(String value) {
        
        // Break String up into Char Array.
        char[] chars = value.toCharArray();
        
        // Loop Through Each Char Value and Determine
        // if it is a Number in the Range (0 - 9). If
        // Not, return false to let the Calling Thread
        // Know that this is not a Valid Number.
        for (int i = 0; i < chars.length; i++) {
            // Check to see if the Current Char in the
            // Array is a Valid Number (0 - 9).
            if (Character.isDigit(chars[i]) == false) {
                // If not, let the Calling Thread
                // Know that it is an invalid Number.
                return false;
            }
        }
    
        // If all Chars are Valid Numbers
        // Return true.
        return true;
    }
    
    /**
     *  This Method is Used to Either Show or Hide
     *  the Status Message JLabel Located at the Bottom
     *  of the GUI Window Form. This Status Message will
     *  be shown should the User Fail to Input the Required
     *  information into one of the Fields or Enter an Invalid
     *  Number into one of two Variable Fields. Additionally,
     *  this Status Message will also be shown after the
     *  performance of a Successful Modular Inverse Calculation,
     *  where it will show the Number of Steps Taken in order
     *  to reach the Desired Value.
     * 
     *  @param value            The Boolean Value which determines
     *                          Whether or not the Status Message
     *                          JLabel will be shown or hidden.
     *                      
     *                          True    -   Show the Message
     *                          False   -   Hide the Message
     */
    public void setStatusMessageVisibility(boolean value) {
        // Set the Visibility of the Status
        // Message JLabel Component.
        jLabel8.setVisible(value);
    }
    
    /**
     *  This Method is Used to Reset the 'Use
     *  Extended Euclidean Algorithm?" Checkbox
     *  to its Default State. This Method is typically
     *  Called after a Successful Modular Inverse
     *  Calculation Process or when the User Chooses
     *  to Edit the Information Present in Either
     *  of the Variable Fields.
     */
    public void resetCheckBox() {
        // Set the Checkbox as Unselected.
        jCheckBox1.setSelected(false);
    }
    
    /**
     *  This Method is used to either Enable / Disable
     *  all of the User Response Components within the
     *  GUI Window Form. This Method is typically invoked
     *  whenever the User Clicks Upon the 'Calculate' Button.
     *  This is done to ensure that the Data in the 
     *  User Response Fields is not Manipulated and that
     *  the User is Unable to Click on any other Response
     *  / Button Components until the Calculation Process
     *  either ends in Failure or Success. The Method will
     *  then be invoked to enable all the Components again 
     *  once the Result is Displayed, or the User Exits from
     *  the Warning Message Window that has been Spawned.
     * 
     *  @param value                The Boolean Value that
     *                              Determines whether all the
     *                              GUI Window Components are
     *                              Enabled / Disabled.
     *
     *                              True    -   Enabled - (User Can
     *                                          Manipulate Components)
     * 
     *                              False   -   Disabled - (User Cannot
     *                                          Manipulate Components)
     */
    public static void enableComponents(boolean value) {
        // Set the Enablement Status of the 'A'
        // Variable User Response Text Field.
        jTextField1.setEnabled(value);
        // Set the Enablement Status of the 'B'
        // Variable User Response Text Field.
        jTextField2.setEnabled(value);
        
        // Set the Enablement Status of the 'A'
        // Variable JLabel Text which Acts as an
        // Identifier for the User Response Box.
        //
        // (Note: This is Done For Aesthetic Properties
        // Seeing as the JLabel has No Action Upon
        // a User Click Event.)
        jLabel3.setEnabled(value);
        // Set the Enablement Status of the 'B'
        // Variable JLabel Text which Acts as an
        // Identifier for the User Response Box.
        //
        // (Note: This is Done For Aesthetic Properties
        // Seeing as the JLabel has No Action Upon
        // a User Click Event.)
        jLabel4.setEnabled(value);
        // Set the Enablement Status of the 'R'
        // Variable JLabel Text which Acts as an
        // Identifier for the User Response Box.
        //
        // (Note: This is Done For Aesthetic Properties
        // Seeing as the JLabel has No Action Upon
        // a User Click Event.)
        jLabel5.setEnabled(value);
        
        // Set the Enablement Status of the
        // 'Calculate' JButton Component.
        jButton1.setEnabled(value);
        // Set the Enablement Status of the
        // 'Clear' JButton Component.
        jButton2.setEnabled(value);
        
        // Set the Enablement Status of the
        // 'Use Extended Euclidean Algorithm?'
        // JCheckBox Component.
        jCheckBox1.setEnabled(value);
        // Set the Enablement Status of the
        // 'Use Extended Euclidean Algorithm?'
        // JLabel Message Component.
        //
        // (Note: This is Done For Aesthetic Properties
        // Seeing as the JLabel has No Action Upon
        // a User Click Event.)
        jLabel9.setEnabled(value);
    }
    
    /**
     *  This Method is Invoked When the User Clicks Upon
     *  The Calculate JButton in the GUI Form. It is Responsible
     *  for Aesthetic Properties within the GUI Form such as
     *  Resetting all of the User Response Fields to the Background
     *  Color of White, and Removing any Previous Calculation
     *  Result Data / Hiding the Bottom Status Message Upon the
     *  Invoking of a new Calculation Operation.
     */
    public void resetComponentAesthetics() {
        
        // Set the Background of the 'A' Variable User
        // Response Field to the Color White.
        jTextField1.setBackground(new java.awt.Color(255, 255, 255));
        
        // If the Default Message is Not Present Within the
        // 'A' Variable User Input Field, then Change the
        // Font Color of the Field to Black.
        if (!jTextField1.getText().equalsIgnoreCase("Ex. \"270\"")) {
            // Set Font Color to Black
            jTextField1.setForeground(new java.awt.Color(0, 0, 0));
        }
        
        // Set the Background of the 'B' Variable User
        // Response Field to the Color White.
        jTextField2.setBackground(new java.awt.Color(255, 255, 255));
        
        // If the Default Message is Not Present Within the
        // 'A' Variable User Input Field, then Change the
        // Font Color of the Field to Black.
        if (!jTextField2.getText().equalsIgnoreCase("Ex. \"192\"")) {
            // Set Font Color to Black
            jTextField2.setForeground(new java.awt.Color(0, 0, 0));
        }
        
        // Hide the Status / Error Message JLabel
        // Should it Currently be Visible.
        setStatusMessageVisibility(false);
        
        // Reset the Modular Inverse Result
        // Field to its Default Value should
        // ther be data present from a previous
        // operation.
        jTextArea1.setText("");
    }
    
    /**
     *  This method is used to create a new Instance of the
     *  GUI Window and invoke the initComponents Method
     *  which creates the Form and Positions the Components
     *  Contained Within it.
     * 
     *  @param args         Command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        // Create New Window Instance
        // and Show the Form.
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static javax.swing.JButton jButton1;
    public static javax.swing.JButton jButton2;
    public static javax.swing.JCheckBox jCheckBox1;
    public static javax.swing.JLabel jLabel1;
    public static javax.swing.JLabel jLabel2;
    public static javax.swing.JLabel jLabel3;
    public static javax.swing.JLabel jLabel4;
    public static javax.swing.JLabel jLabel5;
    public static javax.swing.JLabel jLabel6;
    public static javax.swing.JLabel jLabel7;
    public static javax.swing.JLabel jLabel8;
    public static javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    public static javax.swing.JScrollPane jScrollPane1;
    public static javax.swing.JTextArea jTextArea1;
    public static javax.swing.JTextField jTextField1;
    public static javax.swing.JTextField jTextField2;
    // End of variables declaration//GEN-END:variables

    /**
     *  This Class is an Implementation of the Java SwingWorker Interface,
     *  which is used to create Background Threads that can perform
     *  operations and make changes to the GUI Form. A Java Swing Program
     *  is run off a Special Kind of Thread Called an Event Queue Thread which
     *  is specifically made to Handle Events Such as ActionPerformed,
     *  MouseClicked, and FocusLost/FocusGained methods while being able
     *  to immediately return to its Original Task. This means that a regular
     *  Java Class or Java Thread, is unable to invoke Changes within a Java
     *  Swing Form without causing unprecedented, non-repeatable errors during
     *  Program Execution. Thus, to invoke Changes to the Swing Form without
     *  violating the Rules of the Main Event Queue Thread, we create an Instance
     *  of the Java SwingWorker Class. This SwingWorker Class is used to create
     *  a Second Background Event Queue Thread which is used to Free Up the
     *  Main Event Queue Thread of doing long taxing operations (So that it may
     *  focus on maintaining the Window Form's Overall Appearance [Look & Feel]),
     *  in addition to being able to invoke changes within the Swing Form without
     *  causing unprecedented unrepeatable errors.
     *  
     *  The TaskHandler Class is used to create and execute a Background Thread
     *  every time the User Clicks on one of the two JButton Components Located Within
     *  the form. Once these threads are executed, they will be used to either Retrieve
     *  and determine User Response Integrity before moving on to the Decryption Process
     *  or alter Component Information/Aesthetics.
     * 
     *  (Note: the doInBackground() method is the Equivalent of the run() method
     *  used when manipulating regular threads. This means that the doInBackground()
     *  method will immediately start once the Program invokes the execute() method
     *  on the new TaskHandler SwingWorker Class Instance. The done() method is invoked
     *  immediately after the doInBackground() method has finished its execution. Although
     *  there may be no Operations performed within the Method, it its required to have
     *  within every SwingWorker Interface.)
     */
    public class TaskHandler extends SwingWorker<Void,Void> {
        
        // This is a Local Variable Used to
        // Set the Task Number of the Created
        // Thread. This Number will tell the Thread
        // Which Operation to Execute in the
        // doInBackground() Method.
        public int task;
        
        /**
         *  This Constructor is Used to Create a
         *  new TaskHandler Event Queue Thread Object
         *  and set the Task Number which determines
         *  what the new Thread will do.
         * 
         *  @param value        The Integer containing the 
         *                      Task Number which Determines
         *                      the Thread's Execution Role.
         */
        public TaskHandler(int value) {
            // Set the Task Number
            task = value;
        }
        
        /**
         *  This method will be executed once a New Instance
         *  of the TaskHandler Swing Interface is Created and
         *  the execute() method is invoked. The newly created Thread
         *  will execute the Code Block Corresponding with the
         *  Task Number it is Initialized With.
         * 
         *  @return             Returns a Null Value seeing as this
         *                      is a Void Event Queue Thread Execution
         *                      method. The doInBackground() Method
         *                      will never have a different Return Value.
         * 
         *  @throws Exception   Possible Initialization Exception That
         *                      may happen due to Thread Concurrency.
         */
        @Override
        protected Void doInBackground() throws Exception {
             
            // This Code Block is Executed By the Thread
            // Spawned when the formWindowOpened() method
            // is invoked. This method is Responsible for
            // the initial setup of the Forms Components in
            // addition to Adding the 'Cut', 'Copy', 'Paste', and
            // 'Select All' Action Capabilities to the JTextArea
            // and JTextField Components.
            if (task == 0) {

                // Create New PopUp Menu Component which will
                // be shown everytime the User Right Clicks
                // upon the Text Contained Within one of the
                // JTextField or JTextArea Components.
                JPopupMenu menu = new JPopupMenu();
                
                // Create New Action Object for the 'Cut' Command
                Action cut = new DefaultEditorKit.CutAction();
                // Set the Name of the Action Object.
                cut.putValue(Action.NAME, "Cut");
                // Set the User's Keyboad Key which is a Shortcut
                // to performing the Cut Action.
                cut.putValue(Action.ACCELERATOR_KEY, KeyStroke.getKeyStroke("control X"));
                // Add the Cut Action Object to
                // the Popup Menu Component which
                // will allow the User to Select
                // and perform the Operation upon
                // Right-Clicking a Text Component.
                menu.add(cut);

                // Create New Action Object for the 'Copy' Command
                Action copy = new DefaultEditorKit.CopyAction();
                // Set the Name of the Action Object.
                copy.putValue(Action.NAME, "Copy");
                // Set the User's Keyboad Key which is a Shortcut
                // to performing the Copy Action.
                copy.putValue(Action.ACCELERATOR_KEY, KeyStroke.getKeyStroke("control C"));
                // Add the Cut Action Object to
                // the Popup Menu Component which
                // will allow the User to Select
                // and perform the Operation upon
                // Right-Clicking a Text Component.
                menu.add(copy);

                // Create New Action Object for the 'Paste' Command
                Action paste = new DefaultEditorKit.PasteAction();
                // Set the Name of the Action Object.
                paste.putValue(Action.NAME, "Paste");
                // Set the User's Keyboad Key which is a Shortcut
                // to performing the Paste Action.
                paste.putValue(Action.ACCELERATOR_KEY, KeyStroke.getKeyStroke("control V"));
                // Add the Cut Action Object to
                // the Popup Menu Component which
                // will allow the User to Select
                // and perform the Operation upon
                // Right-Clicking a Text Component.
                menu.add(paste);

                // Create New Action Object From the SelectAll
                // Class Implementation Below. This Command will
                // be used to Allow the User to Select the
                // Contents contained within a Component in thier
                // Entirety instead of just the Visible Area.
                Action selectAll = new SelectAll();
                // Add the Cut Action Object to
                // the Popup Menu Component which
                // will allow the User to Select
                // and perform the Operation upon
                // Right-Clicking a Text Component.
                menu.add(selectAll);
        
                // Set the Popup Menu Object We Just Created
                // and Populated as the Pop-up Menu Shown
                // upon Right-Clicking the 'Key' Text Field.
                jTextField1.setComponentPopupMenu(menu);
                // Set the Popup Menu Object We Just Created
                // and Populated as the Pop-up Menu Shown
                // upon Right-Clicking the 'Initialization 
                // Vector (IV)' Text Field.
                jTextField2.setComponentPopupMenu(menu);
                // Set the Popup Menu Object We Just Created
                // and Populated as the Pop-up Menu Shown
                // upon Right-Clicking the 'Encrypted Message'
                // Text Area.
                jTextArea1.setComponentPopupMenu(menu);

                // Hide the Loading GIF Image Seeing
                // as we have finished the Initial
                // Component Setup.
                showWaitingImage(false);
                // Enable all the Components Seeing
                // as we have finished Initial Variable
                // Setup.
                enableComponents(true);
            }
            // Begin the Information Validity Check Regarding
            // the Two Numbers that the User has Inputted into
            // the 'A' and 'B' Variable Fields.
            //
            // First Ensure that the User hasn't Neglected to
            // Enter any Information in to the Response Fields.
            else if (task == 1) {
                // Reset the GUI Window Forms Aesthetic
                // Properties.
                resetComponentAesthetics();
                
                // Retrieve the User Input Value from the 'A'
                // Variable TextField and Use the FormatString
                // Method to Remove all of the Space, New Line,
                // and Tab Characters from Within the String.
                String avalue = formatString(jTextField1.getText());
                // Retrieve the User Input Value from the 'B'
                // Variable TextField and Use the FormatString
                // Method to Remove all of the Space, New Line,
                // and Tab Characters from Within the String.
                String bvalue = formatString(jTextField2.getText());
                
                // Create a Boolean Array Which is Responsible for
                // Determining whether or not a Variable Field is 
                // Missing Input Information.
                boolean[] checkBlank = {true, true};
                
                // Check to See if the Default String is Present Within
                // the 'A' Variable Response Field. If so, mark the Check
                // Entry as False to Trigger a Warning Screen.
                if (jTextField1.getText().equalsIgnoreCase("Ex. \"270\"")) {
                    // Set the Check Value as
                    // False.
                    checkBlank[0] = false;
                }
                // Check to See if the Default String is Present Within
                // the 'B' Variable Response Field. If so, mark the Check
                // Entry as False to Trigger a Warning Screen.
                if (jTextField2.getText().equalsIgnoreCase("Ex. \"192\"")) {
                    // Set the Check Value 
                    // as False.
                    checkBlank[1] = false;
                }
                
                // If Both Fields are Missing User Response Information,
                // then Create an Error Message Letting the User Know
                // Why the Process Failed.
                if (checkBlank[0] == false && checkBlank[1] == false) {
                    // Create Warning Message GUI Pop-Up Window with
                    // the Particular Error Message Type.
                    WarningMessageFrame warning = new WarningMessageFrame(0);
                    
                    // Create Custom String to be Displayed on the Warning
                    // Message Window Frame.
                    String formattedHTML = "<html><center>Please Provide Responses in both the 'A' and 'B' Variable Fields.</center></html>";
                    // Set the String as the Display Message
                    // on the Pop-up Form.
                    warning.jLabel6.setText(formattedHTML);
                    
                    // Hide the Loading GIF Image seeing as
                    // the Calculation Operation has Failed.
                    showWaitingImage(false);
                    // Show the Pop-Up Window.
                    warning.setVisible(true);
                }
                // If the 'A' Field is Missing User Response Information,
                // then Create an Error Message Letting the User Know
                // Why the Process Failed.
                else if (checkBlank[0] == false) {
                    // Create Warning Message GUI Pop-Up Window with
                    // the Particular Error Message Type.
                    WarningMessageFrame warning = new WarningMessageFrame(1);
                    
                    // Create Custom String to be Displayed on the Warning
                    // Message Window Frame.
                    String formattedHTML = "<html><center>Please Provide a Response in the 'A' Variable Field.</center></html>";
                    // Set the String as the Display Message
                    // on the Pop-up Form.
                    warning.jLabel6.setText(formattedHTML);
                    
                    // Hide the Loading GIF Image seeing as
                    // the Calculation Operation has Failed.
                    showWaitingImage(false);
                    // Show the Pop-Up Window.
                    warning.setVisible(true);
                }
                // If the 'B' Field is Missing User Response Information,
                // then Create an Error Message Letting the User Know
                // Why the Process Failed.
                else if (checkBlank[1] == false) {
                    // Create Warning Message GUI Pop-Up Window with
                    // the Particular Error Message Type.
                    WarningMessageFrame warning = new WarningMessageFrame(2);
                    
                    // Create Custom String to be Displayed on the Warning
                    // Message Window Frame.
                    String formattedHTML = "<html><center>Please Provide a Response in the 'B' Variable Field.</center></html>";
                    // Set the String as the Display Message
                    // on the Pop-up Form.
                    warning.jLabel6.setText(formattedHTML);
                    
                    // Hide the Loading GIF Image seeing as
                    // the Calculation Operation has Failed.
                    showWaitingImage(false);
                    // Show the Pop-Up Window.
                    warning.setVisible(true);
                }
                // Now that we have Finished Checking to
                // Ensure that the User has actually entered
                // responses in the two Required Fields, now
                // we must ensure that both Responses Contain
                // Valid Numbers that can be transformed into
                // Big Integer Objects.
                else {
                    // Create Another Boolean Array Which
                    // will be used to Check the Validity of
                    // the User's Number Responses.
                    boolean[] checker = {false, false};
                
                    // Run the 'A' Field User Response Value
                    // through the Verify Number Method which
                    // will break the String into an Array of
                    // Chars and Verify that Each Individual
                    // Char is a Digit in the Range (0 - 9).
                    checker[0] = verifyNumber(avalue);
                    // Run the 'B' Field User Response Value
                    // through the Verify Number Method which
                    // will break the String into an Array of
                    // Chars and Verify that Each Individual
                    // Char is a Digit in the Range (0 - 9).
                    checker[1] = verifyNumber(bvalue);

                    // If Both the 'A' and 'B' Field User Responses
                    // Contain Invalid Numbers, then Create a Warning
                    // Pop-up Message to Let the User Know Why the Process
                    // Has Failed.
                    if (checker[0] == false && checker[1] == false) {
                        // Create Warning Message GUI Pop-Up Window with
                        // the Particular Error Message Type.
                        WarningMessageFrame warning = new WarningMessageFrame(3);
                        
                        // Create Custom String to be Displayed on the Warning
                        // Message Window Frame.
                        String formattedHTML = "<html><center>The Responses You've Provided in the 'A' & 'B' Variable Fields Contain Invalid Numbers. Please Check You Input and Try Again.</center></html>";
                        // Create Custom String to be Displayed on the Warning
                        // Message Window Frame.
                        warning.jLabel6.setText(formattedHTML);

                        // Hide the Loading GIF Image
                        // Seeing as the Calculation
                        // Process Has Failed.
                        showWaitingImage(false);
                        // Show the Warning Message
                        // Pop-up Window to the User.
                        warning.setVisible(true);
                    }
                    // If Both the 'A' Field User Response Contains
                    // and Invalid Number, then Create a Warning
                    // Pop-up Message to Let the User Know Why the
                    // Calculation Process Has Failed.
                    else if (checker[0] == false) {
                        // Create Warning Message GUI Pop-Up Window with
                        // the Particular Error Message Type.
                        WarningMessageFrame warning = new WarningMessageFrame(4);
                        
                        // Create Custom String to be Displayed on the Warning
                        // Message Window Frame.
                        String formattedHTML = "<html><center>The Response You Provided in the 'A' Variable Field is an Invalid Number. Please Check You Input and Try Again.</center></html>";
                        // Set the Custom String as the Display
                        // Message Within the Pop-Up Form.
                        warning.jLabel6.setText(formattedHTML);

                        // Hide the Loading GIF Image
                        // Seeing as the Calculation
                        // Process Has Failed.
                        showWaitingImage(false);
                        // Show the Warning Message
                        // Pop-up Window to the User.
                        warning.setVisible(true);
                    }
                    // If Both the 'B' Field User Response Contains
                    // and Invalid Number, then Create a Warning
                    // Pop-up Message to Let the User Know Why the
                    // Calculation Process Has Failed.
                    else if (checker[1] == false) {
                        // Create Warning Message GUI Pop-Up Window with
                        // the Particular Error Message Type.
                        WarningMessageFrame warning = new WarningMessageFrame(5);
                        
                        // Create Custom String to be Displayed on the Warning
                        // Message Window Frame.
                        String formattedHTML = "<html><center>The Response You Provided in the 'B' Variable Field is an Invalid Number. Please Check You Input and Try Again.</center></html>";
                        // Set the Custom String as the Display
                        // Message Within the Pop-Up Form.
                        warning.jLabel6.setText(formattedHTML);

                        // Hide the Loading GIF Image
                        // Seeing as the Calculation
                        // Process Has Failed.
                        showWaitingImage(false);
                        // Show the Warning Message
                        // Pop-up Window to the User.
                        warning.setVisible(true);
                    }
                    // At this Point, We have Passed all of the
                    // Required Input Checks, so we can Convert
                    // the User's Response Values into two
                    // BigInteger Objects.
                    else {
                        // Convert the String Retrieved from the
                        // 'A' Variable Field and use it to Create
                        // a new BigInteger Object with the Specified
                        // Number Value.
                        BigInteger a = new BigInteger(avalue);
                        // Convert the String Retrieved from the
                        // 'B' Variable Field and use it to Create
                        // a new BigInteger Object with the Specified
                        // Number Value.
                        BigInteger b = new BigInteger(bvalue);
                        
                        // Create a Reference to the ModularMultiplicativeInverse
                        // Class which holds the Methods Responsible for Finding
                        // our Modular Multiplicative Inverse Value.
                        ModularMultiplicativeInverse mmi = new ModularMultiplicativeInverse();
                        
                        // Instantiate a Custom Return Object which will be
                        // used in order to Retrieve the Final Result of the
                        // Modular Multiplicative Inverse Calculation and the
                        // Number of Steps Taken to Find the Result.
                        MMIReturnValue result = new MMIReturnValue(false, a, b, 0);
                        
                        // If the "Use Extended Euclidean Algorithm?"
                        // Checkbox is NOT Selected, then Proceed to
                        // Find the Modular Multiplicative Inverse
                        // Result Using the Naive Approach.
                        if (jCheckBox1.isSelected() == false) {
                            // Retrieve the Result of the
                            // Modular Multiplicative Inverse
                            // Calculation Process.
                            result = mmi.findInverse(a, b);
                        }
                        // If the "Use Extended Euclidean Algorithm?"
                        // Checkbox is Selected, then Proceed to
                        // Find the Modular Multiplicative Inverse
                        // Result Using the Extended Euclidean 
                        // Algorithm Approach.
                        else {
                            // Retrieve the Result of the
                            // Modular Multiplicative Inverse
                            // Calculation Process.
                            result = mmi.modInverseEEA(a, b);
                        }
                        
                        // Hide the Loading GIF Image Seeing
                        // as we have now finished the Calculation
                        // Process.
                        showWaitingImage(false);
                        // Uncheck the "Use EEA?" Checkbox
                        // Regardless of the Result.
                        resetCheckBox();
                        
                        // If the Operation Has Failed to Find or
                        // Determined that there is no Modular Multiplicative 
                        // Inverse present for the Provided Number Set, then
                        // Print Message in the Result Text Area.
                        if (result.getResult() == false) {
                            // Set the Display Message to Let the User
                            // Know that there is No Modular Multiplicative Inverse
                            // For the Given Set of Numbers.
                            jTextArea1.setText("No Modular Multiplicative Inverse Found.");
                        }
                        // If the Operation has Determined that
                        // there is a Modular Multiplicative Inverse
                        // Present, then Display the Calculated Value
                        // within the Result Text Area and Show the
                        // Steps Taken within the Text Field Underneath.
                        else {
                            // Set the Modular Multiplicative Inverse Value
                            // Within the Result Text Area.
                            jTextArea1.setText("" + result.getModularInverse().toString());
                            
                            // Initialize a Temporary String
                            // Variable that is Meant to Hold
                            // the Custom Steps Counting Informational
                            // Message.
                            String stepsCounter = "";
                            // Initialize a Temporary String
                            // to Hold our Status Message
                            // Value.
                            String stepsNotation = "";
                            
                            // In this Segement, we will Check to See How Big the
                            // String Containing the Number of Steps Required is. If
                            // the String is longer than seven characters, we will
                            // Convert the Amount of Steps into its Scientific Notation
                            // Equivalent In order to Stop the Status Message's Length From
                            // Breaching the Size of GUI Window Frame.
                            if (result.getCounter().toString().length() > 6) {

                                // Create a new Number Formatter Object Which Will be Responsible
                                // for Converting the BigInteger Number into its Scientific Notation
                                // Form.
                                BigDecimal decimal = new BigDecimal(result.getCounter(),new MathContext(6));
                                // Save the Scientific Notation Big Integer
                                // Number into the stepsCounter Variable.
                                stepsNotation = decimal.toString();
                            }
                            // If the Resulting Step Counter Value isn't
                            // Longer than Seven Characters, then Proceed
                            // as Normal.
                            else {
                                // Save the Steps Counter Value from the
                                // Return Object.
                                stepsNotation = result.getCounter().toString();
                            }
                            
                            // If the Naive Approach Was Used
                            // in Generating the Modular Multiplicative
                            // Inverse Value.
                            if (result.getMethodType() == 0) {
                                // Create a Custom String That Displays the
                                // Amount of Steps Needed to Find the Modular
                                // Multiplicative Inverse.
                                stepsCounter = "<html><center><font color=#00D3F9>Steps Needed to Find Inverse (Naive):</font> <font color=#F90000>" + stepsNotation + "</font></center></html>";
                            }
                            // If the Naive Approach Was Used
                            // in Generating the Modular Multiplicative
                            // Inverse Value.
                            else if (result.getMethodType() == 1) {
                                // Create a Custom String That Displays the
                                // Amount of Steps Needed to Find the Modular
                                // Multiplicative Inverse.
                                stepsCounter = "<html><center><font color=#00D3F9>Steps Needed to Find Inverse (EEA):</font> <font color=#F90000>" + stepsNotation + "</font></center></html>";
                            }
                            
                            // Display the Formatted Steps Counter
                            // String within the Display Message
                            // JLabel underneath the Text Area.
                            jLabel8.setText(stepsCounter);
                            
                            // Show the Status Message Label.
                            setStatusMessageVisibility(true);
                        }
                    }
                }
                
                // Enable the Components within
                // the GUI Form Seeing as the
                // Operation Has Finished.
                enableComponents(true);
            }
            else if (task == 2) {
                // Reset the Component Fields
                // to thier Original Values.
                resetComponentValues();
                // Re-Enable the Window Form's
                // Components Seeing as the Reset
                // Process Has Been Completed.
                enableComponents(true);
                // Hide the Loading Image 
                // Seeing as the Reset
                // Process Has Been Completed.
                showWaitingImage(false);
            }
            
            // We will Always Return a Value of
            // Null Once the Event Queue Background
            // Thread has finished its Execution
            // Process.
            return null;
        }
        
        /**
         * This method is automatically invoked after the
         * doInBackground() method has finished
         * executing.
        **/
        @Override
        protected void done() {
            // Nothing to Do..
        }
    }
    /**
     *  This Class is Used to Create A New Pop Up
     *  Menu Action Object Which Allows the user to Select
     *  the Entirety of a Components Contents Upon
     *  a Mouse's Right Click Action.
     */
    static class SelectAll extends TextAction {
        /**
         *  Basic Constructor Used to
         *  Create the Class Instance and
         *  Initialize its Local Variables.
         */
        public SelectAll() {
            // Set the Name of the Action
            // Object
            super("Select All");
            // Set the KeyBoard Shortcut
            // for the Action.
            putValue(Action.ACCELERATOR_KEY, KeyStroke.getKeyStroke("control S"));
        }

        /**
         *  This Method is invoked whenever the
         *  User clicks the "Ctrl" & "S" Buttons
         *  concurrently or Selects the "Select
         *  All" Option from the JPopup Menu Objects.
         * 
         *  @param e        The Action of Clicking 
         *                  "Ctrl" & "S" on the Keyboard
         *                  or Selecting the "Select All"
         *                  Option from the JPopupMenu
         *                  Object Form.
         */
        public void actionPerformed(ActionEvent e) {
            // Retrieve Reference to the Component that
            // currently Holds the Main Event Queue Thread's
            // Focus.
            JTextComponent component = getFocusedComponent();
            // Select All Content Text From
            // Within the Component.
            component.selectAll();
            // Make Sure the Component Keeps the
            // Focus Contained on It After Action
            // Method Exit.
            component.requestFocusInWindow();
        }
    }
}
