/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package modularinversecalculator;

import javax.swing.SwingWorker;

/**
 *  Creates a Small GUI Window Which is Used
 *  to Alert Users of Whether or Not they Have
 *  Entered an Invalid Number Input for the
 *  Modular Inverse Calculation.
 *  
 *  @date       October 25 2020
 *  @author     Tyler Fontana
 *  @version    1.0.1
 */
public class WarningMessageFrame extends javax.swing.JFrame {

    /**
     *  Basic Constructor that is Responsible
     *  For Creating a Reference to the Class
     *  Instance In Addition to Invoking the
     *  initComponents() Method which Creates
     *  and Packs the WarningMessageFrame 
     *  Window's Form.
     * 
     *  @param value        The Integer Containing
     *                      the Type of Error Which
     *                      has occurred and caused
     *                      the Creation of this GUI
     *                      Class.
     */
    public WarningMessageFrame(int value) {
        // Set the Global Error Type
        // Which is Used to Determine
        // how the Main GUI Window's Form
        // is Altered on this Window's Disposal.
        errorType = value;
        // Create the GUI Display
        // Window Form.
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Warning Screen");
        setBackground(new java.awt.Color(153, 153, 153));
        setLocation(new java.awt.Point(450, 294));
        setName("WarningFrame"); // NOI18N
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });
        getContentPane().setLayout(new javax.swing.OverlayLayout(getContentPane()));

        jPanel2.setBackground(new java.awt.Color(204, 204, 204));
        jPanel2.setOpaque(false);

        jLabel6.setFont(new java.awt.Font("Lucida Grande", 1, 12)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Please Enter A Response In The");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(102, 102, 102)
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(26, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(21, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel2);

        jPanel1.setBackground(new java.awt.Color(204, 204, 204));
        jPanel1.setOpaque(false);

        jLabel1.setBackground(new java.awt.Color(204, 204, 204));
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/modularinversecalculator/images/YMIcon75x75.png"))); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 358, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                    .addContainerGap(15, Short.MAX_VALUE)
                    .addComponent(jLabel2)
                    .addContainerGap(268, Short.MAX_VALUE)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 114, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                    .addContainerGap(15, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(17, Short.MAX_VALUE)))
        );

        getContentPane().add(jPanel1);

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/modularinversecalculator/images/steelbackground356x112.png"))); // NOI18N
        jLabel3.setToolTipText("");
        jLabel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 358, Short.MAX_VALUE)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 114, Short.MAX_VALUE)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel3);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     *  This Method is Invoked Whenever the Window
     *  is Closed or the dispose() method is Called.
     *  It is responsible for Creating and Executing
     *  a Background Event Queue Thread which will
     *  Alter the Main GUI's Form in Representation
     *  of the Error that has occurred.
     * 
     *  @param evt      The Event of the Current Window
     *                  Closing.
     */
    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        // Execute Background Running Thread.
        new TaskHandler().execute();
    }//GEN-LAST:event_formWindowClosed

    /**
     *  This Method is Used to Change the Color of the
     *  Main GUI Window's 'A' Variable TextField Component's
     *  Background and Font Color. Should an Error Have occurred,
     *  The 'A' Variable TextField will have its White Background
     *  Changed to Red while the Color of the Text Contained
     *  Within the Component Will be Changed to Gray.
     * 
     *  (Note: This is Done to improve Application Aesthetic
     *  Properties and Improve User Interaction / Comprehension.)
     * 
     *  This Method is Only Called After the User Exits From
     *  the Warning Message Frame Window.
     * 
     */
    public void showUserErrorAVariableField() {
        // Set the Key JTextField's Background Color to the Color
        // Red in order to Show the User's Error.
        GUI.jTextField1.setBackground(new java.awt.Color(255, 0, 51));
        // Set the Key JTextField's Font Color to the Color
        // Light Gray in order to Show the User's Error.
        GUI.jTextField1.setForeground(new java.awt.Color(204, 204, 204));
    }
    
    /**
     *  This Method is Used to Change the Color of the
     *  Main GUI Window's 'B' Variable TextField Component's
     *  Background and Font Color. Should an Error Have occurred,
     *  The 'B' Variable TextField will have its White Background
     *  Changed to Red while the Color of the Text Contained
     *  Within the Component Will be Changed to Gray.
     * 
     *  (Note: This is Done to improve Application Aesthetic
     *  Properties and Improve User Interaction / Comprehension.)
     * 
     *  This Method is Only Called After the User Exits From
     *  the Warning Message Frame Window.
     * 
     */
    public void showUserErrorBVariableField() {
        // Set the Key JTextField's Background Color to the Color
        // Red in order to Show the User's Error.
        GUI.jTextField2.setBackground(new java.awt.Color(255, 0, 51));
        // Set the Key JTextField's Font Color to the Color
        // Light Gray in order to Show the User's Error.
        GUI.jTextField2.setForeground(new java.awt.Color(204, 204, 204));
    }
    
    /**
     *  This Method is Used to Change the Text of and Display the
     *  Error Message JLabel located at the Bottom of the Main GUI
     *  Window's Form. In Case the User has forgotten the Reason for
     *  the Error occurring after Exiting the Warning Message Window
     *  Frame, the Error Message JLabel located at the Bottom of the
     *  Main GUI Window's Form will act as Reminder in addition to
     *  the Red Backgrounds and GRay Text of the Components Containing
     *  Invalid Text.
     *  
     *  @param  message         The Error Message That will be Displayed
     *                          in the Error Message JLabel located at
     *                          the Bottom of the Main GUI's Form.
     */
    public void setAndDisplayReminderErrorMessage(String message) {
        // Set the Display Text of the Reminder Error
        // Message Located Within the GUI JFrame Window.
        GUI.jLabel8.setText(message);
        // Show the Reminder Error Message Seeing
        // As An Error Has Occured.
        GUI.jLabel8.setVisible(true);
    }
    
    /**
     *  This method is used to create a new Instance of the
     *  GUI Window and invoke the initComponents Method
     *  which creates the Form and Positions the Components
     *  Contained Within it.
     * 
     *  @param args         Command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(WarningMessageFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(WarningMessageFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(WarningMessageFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(WarningMessageFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                // Create New Window Instance
                // and Show the Form.
                new WarningMessageFrame(-1).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    public static javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    // End of variables declaration//GEN-END:variables
    
    // Global Integer Variable Containing
    // the Integer Number Corresponding with
    // the Type of Error that has Occured.
    public int errorType;
    
    /**
     *  This Class is an Implementation of the Java SwingWorker Interface,
     *  which is used to create Background Threads that can perform
     *  operations and make changes to the GUI Form. A Java Swing Program
     *  is run off a Special Kind of Thread Called an Event Queue Thread which
     *  is specifically made to Handle Events Such as ActionPerformed,
     *  MouseClicked, and FocusLost/FocusGained methods while being able
     *  to immediately return to its Original Task. This means that a regular
     *  Java Class or Java Thread, is unable to invoke Changes within a Java
     *  Swing Form without causing unprecedented, non-repeatable errors during
     *  Program Execution. Thus, to invoke Changes to the Swing Form without
     *  violating the Rules of the Main Event Queue Thread, we create an Instance
     *  of the Java SwingWorker Class. This SwingWorker Class is used to create
     *  a Second Background Event Queue Thread which is used to Free Up the
     *  Main Event Queue Thread of doing long taxing operations (So that it may
     *  focus on maintaining the Window Form's Overall Appearance [Look & Feel]),
     *  in addition to being able to invoke changes within the Swing Form without
     *  causing unprecedented unrepeatable errors.
     *  
     *  The TaskHandler Class is used to create and execute a Background Thread
     *  every time the User Clicks on one of the two JButton Components Located Within
     *  the form. Once these threads are executed, they will be used to either Retrieve
     *  and determine User Response Integrity before moving on to the Decryption Process
     *  or alter Component Information/Aesthetics.
     * 
     *  (Note: the doInBackground() method is the Equivalent of the run() method
     *  used when manipulating regular threads. This means that the doInBackground()
     *  method will immediately start once the Program invokes the execute() method
     *  on the new TaskHandler SwingWorker Class Instance. The done() method is invoked
     *  immediately after the doInBackground() method has finished its execution. Although
     *  there may be no Operations performed within the Method, it its required to have
     *  within every SwingWorker Interface.)
     */
    public class TaskHandler extends SwingWorker<Void,Void> {
        
        /**
         *  This method will be executed once a New Instance
         *  of the TaskHandler Swing Interface is Created and
         *  the execute() method is invoked. The newly created Thread
         *  will execute the Code Block Corresponding with the
         *  Task Number it is Initialized With.
         * 
         *  @return             Returns a Null Value seeing as this
         *                      is a Void Event Queue Thread Execution
         *                      method. The doInBackground() Method
         *                      will never have a different Return Value.
         * 
         *  @throws Exception   Possible Initialization Exception That
         *                      may happen due to Thread Concurrency.
         */
        @Override
        protected Void doInBackground() throws Exception {
            
            // Instantiate A String Variable
            // to Hold the HTML Formatted Reminder
            // Error Message which will be Displayed
            // in the GUI JFrame Window Form.
            String message;
            
            // Depending on the value contained within the Error Type
            // Integer Variable Passed in as a Paramater When the Current Warning
            // Message Frame Window was created, Execute the Corresponding Code
            // Block on Window Disposal.
            switch (errorType) {
                // If Both Fields Are Missing User
                // Input Information.
                case 0:
                    
                    // Request the Focus of the Main GUI Window's
                    // Thread to be placed on the Title Image. This
                    // is Done so that the Red Background will Appear
                    // in whatever User Response Component contains
                    // the Error.
                    GUI.jLabel1.requestFocusInWindow();
                    
                    // Create Reminder Error Message To be Displayed
                    // at the Bottom of the GUI JFrame Window.
                    message = "<html><center>Multiple Fields Contain Missing Information.</center></html>";
                    
                    // Alter 'A' Variable TextField Aesthetics to
                    // Represent User Error.
                    showUserErrorAVariableField();
                    // Alter 'B' Variable TextField Aesthetics to
                    // Represent User Error.
                    showUserErrorBVariableField();
                    
                    // Show Reminder Error Message Within
                    // Main GUI Window.
                    setAndDisplayReminderErrorMessage(message);
                    // Renable GUI Window Components
                    // on Warning Message Window Disposal.
                    GUI.enableComponents(true);
                    // Break From Switch Statement
                    break;
                // If the 'A' Variable TextField is Missing User
                // Input Information.
                case 1:
                    
                    // Request the Focus of the Main GUI Window's
                    // Thread to be placed on the Title Image. This
                    // is Done so that the Red Background will Appear
                    // in whatever User Response Component contains
                    // the Error.
                    GUI.jLabel1.requestFocusInWindow();
                    
                    // Create Reminder Error Message To be Displayed
                    // at the Bottom of the GUI JFrame Window.
                    message = "<html><center>The 'A' Variable TextField is Missing Information.</center></html>";
                    
                    // Alter 'A' Variable TextField Aesthetics to
                    // Represent User Error.
                    showUserErrorAVariableField();
                    
                    // Show Reminder Error Message Within
                    // Main GUI Window.
                    setAndDisplayReminderErrorMessage(message);
                    // Renable GUI Window Components
                    // on Warning Message Window Disposal.
                    GUI.enableComponents(true);
                    // Break From Switch Statement
                    break;
                // If the 'B' Variable TextField is Missing User
                // Input Information.
                case 2:
                    
                    // Request the Focus of the Main GUI Window's
                    // Thread to be placed on the Title Image. This
                    // is Done so that the Red Background will Appear
                    // in whatever User Response Component contains
                    // the Error.
                    GUI.jLabel1.requestFocusInWindow();
                    
                    // Create Reminder Error Message To be Displayed
                    // at the Bottom of the GUI JFrame Window.
                    message = "<html><center>The 'B' Variable TextField is Missing Information.</center></html>";
                    
                    // Alter 'B' Variable TextField Aesthetics to
                    // Represent User Error.
                    showUserErrorBVariableField();
                    
                    // Show Reminder Error Message Within
                    // Main GUI Window.
                    setAndDisplayReminderErrorMessage(message);
                    // Renable GUI Window Components
                    // on Warning Message Window Disposal.
                    GUI.enableComponents(true);
                    // Break From Switch Statement
                    break;
                // If Both the 'A' and 'B' Variable Fields Contain
                // Invalid Number Responses.
                case 3:
                    
                    // Request the Focus of the Main GUI Window's
                    // Thread to be placed on the Title Image. This
                    // is Done so that the Red Background will Appear
                    // in whatever User Response Component contains
                    // the Error.
                    GUI.jLabel1.requestFocusInWindow();
                    
                    // Create Reminder Error Message To be Displayed
                    // at the Bottom of the GUI JFrame Window.
                    message = "<html><center>Multiple Fields Contain Invalid Numbers.</center></html>";
                    
                    // Alter 'A' Variable TextField Aesthetics to
                    // Represent User Error.
                    showUserErrorAVariableField();
                    // Alter 'A' Variable TextField Aesthetics to
                    // Represent User Error.
                    showUserErrorBVariableField();
                    
                    // Show Reminder Error Message Within
                    // Main GUI Window.
                    setAndDisplayReminderErrorMessage(message);
                    // Renable GUI Window Components
                    // on Warning Message Window Disposal.
                    GUI.enableComponents(true);
                    // Break From Switch Statement
                    break;
                // If the 'A' Variable Fields Contains an
                // Invalid Number Response.
                case 4:
                    
                    // Request the Focus of the Main GUI Window's
                    // Thread to be placed on the Title Image. This
                    // is Done so that the Red Background will Appear
                    // in whatever User Response Component contains
                    // the Error.
                    GUI.jLabel1.requestFocusInWindow();
                    
                    // Create Reminder Error Message To be Displayed
                    // at the Bottom of the GUI JFrame Window.
                    message = "<html><center>The 'A' Variable Field Contains an Invalid Number.</center></html>";
                    
                    // Alter 'A' Variable TextField Aesthetics to
                    // Represent User Error.
                    showUserErrorAVariableField();
                    
                    // Show Reminder Error Message Within
                    // Main GUI Window.
                    setAndDisplayReminderErrorMessage(message);
                    // Renable GUI Window Components
                    // on Warning Message Window Disposal.
                    GUI.enableComponents(true);
                    
                    // Break From Switch Statement
                    break;
                // If the 'A' Variable Fields Contains an
                // Invalid Number Response.
                case 5:
                    
                    // Request the Focus of the Main GUI Window's
                    // Thread to be placed on the Title Image. This
                    // is Done so that the Red Background will Appear
                    // in whatever User Response Component contains
                    // the Error.
                    GUI.jLabel1.requestFocusInWindow();
                    
                    // Create Reminder Error Message To be Displayed
                    // at the Bottom of the GUI JFrame Window.
                    message = "<html><center>The 'B' Variable Field Contains an Invalid Number.</center></html>";
                    
                    // Alter 'A' Variable TextField Aesthetics to
                    // Represent User Error.
                    showUserErrorBVariableField();
                    
                    // Show Reminder Error Message Within
                    // Main GUI Window.
                    setAndDisplayReminderErrorMessage(message);
                    // Renable GUI Window Components
                    // on Warning Message Window Disposal.
                    GUI.enableComponents(true);
                    // Break From Switch Statement
                    break;
                // If none of the Error Types
                // Match the Corresponding Number
                default:
                    // Break From Switch Statement
                    break;
            }
            
            // Return the Required Null
            // Value to Show that the Background
            // Event Queue Thread Has Finished
            // Executing.
            return null;
        }
        
        // This method is automatically invoked after the
        // doInBackground() method has finished
        // executing.
        @Override
        protected void done() {
            // Nothing to Do...
        }
    }
}
